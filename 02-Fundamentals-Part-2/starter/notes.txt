'use strict' // activates strict mode
calling, running, invoking function
fnName(arguments) 
//function declaration
function fnName(parameters){
  //fnBody
  return something ;
}
reusable and maintainable code
don't repeat yourself principle
anonymous functions: function with a name
//function expression
const fnName(its a variable) = function(){}
we can call a normal function before the declaration.
we cannot do this with anonymous functions.(expressions)
because of hoisting.
Arrow functions:
const fnName =(args)=>{
  return something ;
}
we do not need  to use parenthesis and return  for one line arrow functions
fnName =(args)=> something 
if there is only one argument we don't need brackets either.
fnName= arg1 => something
arrow functions doesn't get a this keyword.
 function declaration : function that can be used before it's declared.
 function expression: essentially a function value stored in a variable.
 Arrow Function : great for a quick one line functions. Has no this keyword.
 Arrays:
 const arrayName = [];//literal syntax
 const arrayName = new Array(val1, val2,....);
 0 based indexing
 arrayName.length // number of elements
 arrayName[index] = element;
 arrayName.push(element);// arrayName[arrayName.length]= element;
 when using const, only primitive values are immutable.
 array is not a primitive value.
 but,
 const friends = [1,2,3,4];
 friends = [4,5,6,4];//not allowed
const arr = [var, "", 5-6, expression,[],functionCall(it produces value)];
array methods:
push, unshift : returns  length of the array after adding an item.
pop,  shift: returns removed element
indexOf : (-1 if not found)
includes:(true,false)(strict  equality)(used in conditionals)
arrays reference by number
Objects:
key value pairs 
{
  key:value ,
  key1: value1
}
keys are also called properties
{} - object literal syntax
order doesn't matter
dot vs bracket notation
objName.propertyName = value
objName["propertyName"]= value
in bracket, it should be an expression (inside a string.)
anything that produces a value is a expression.(variables, functions)
doesnt work like this in dot notation.
prompt(): takes input from user, pop up window
objName.newProperty = value ;
object methods:
{
  fnName : function(param){
    return param
  },
  prop1:value1,
  fnName : function(){
    return this.prop1
  }
}
obj['fnName'](arg1)
any function attached to a object is called a method.
dry 
this keyword: represents current object who is calling.
this is equal to the object calling the method
arrays are also objects. thats why we have methods on it.
** exponentiation operator
iteration: loops
for(initializations ;conditions; update){//work}

initializations
while(condition){ //do something
update}

initializations
do { // do something
//update} while (condition)

break and continue: stop execution of loop completely or skip one iteration only.
Math.floor/trunc(Math.random()*6)+1 ;















































 

