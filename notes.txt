Javascript is a high-level, object oriented, multi-paradigm programming language.
Separation of concerns.
Value can either be a primitive or an object.
7 primitive data types:
number
string
boolean
undefined
null
Symbol
BigInt
Javascript has dynamic typing : We do not have to manually define the data type of the value stored in a variable. Instead, data types are determined automatically.
In js its the value that has a type, not the variable.
legacy bug : typeof null  === 'object'
let, const and var
const - immutable, cant be empty(initial value)
let - mutable, block scoped, reinitialized, not redeclared
var - mutable, (old way),function scoped, reinitialized and redeclared.
`${template literals}`
type conversion and coercion
conversion is manually changing the type and coercion happens automatically.
type conversion:
string + number = string
+string + number = number
Number(string) + number = number
Number("hello")= NaN(not a number)
String(number)
type coercion:
string + number = string
string - string = number
ex: 2+3+4 +"5" ="95"
Boolean(): truthy and falsy values
0,"",null,false,undefined,NaN
every other value is truthy except these
loose equality == and strict equality ===
=== checks for both value and type(NO TYPE COERCION)
== only checks for value
prompt("takes value from user");
always prefer using strict : !== and ===
not>>and/or :precedence
for different values to do same thing in switch statement:
case  "value1":
case "value2":
//do something
break;
expression is a piece of code that produces a value
statement is a piece of code that does something but doesn't produce a value
in template literal we can only place a expression.
ternary operator:
const drink= age>=18?"wine":"water" ;
we can ternary operator inside template literal because it produces a value.(if else doesn't work).
don't break the web. always should be "backward compatible".
js is not forward compatible:
during development : use updated version of browsers.
during production : use babel to transpile and polyfill s to support older browser.(es5)

section 2:
'use strict' // activates strict mode
calling, running, invoking function
fnName(arguments) 
//function declaration
function fnName(parameters){
  //fnBody
  return something ;
}
reusable and maintainable code
don't repeat yourself principle
anonymous functions: function with a name
//function expression
const fnName(its a variable) = function(){}
we can call a normal function before the declaration.
we cannot do this with anonymous functions.(expressions)
because of hoisting.
Arrow functions:
const fnName =(args)=>{
  return something ;
}
we do not need  to use parenthesis and return  for one line arrow functions
fnName =(args)=> something 
if there is only one argument we don't need brackets either.
fnName= arg1 => something
arrow functions doesn't get a this keyword.
 function declaration : function that can be used before it's declared.
 function expression: essentially a function value stored in a variable.
 Arrow Function : great for a quick one line functions. Has no this keyword.
 Arrays:
 const arrayName = [];//literal syntax
 const arrayName = new Array(val1, val2,....);
 0 based indexing
 arrayName.length // number of elements
 arrayName[index] = element;
 arrayName.push(element);// arrayName[arrayName.length]= element;
 when using const, only primitive values are immutable.
 array is not a primitive value.
 but,
 const friends = [1,2,3,4];
 friends = [4,5,6,4];//not allowed
const arr = [var, "", 5-6, expression,[],functionCall(it produces value)];
array methods:
push, unshift : returns  length of the array after adding an item.
pop,  shift: returns removed element
indexOf : (-1 if not found)
includes:(true,false)(strict  equality)(used in conditionals)
arrays reference by number
Objects:
key value pairs 
{
  key:value ,
  key1: value1
}
keys are also called properties
{} - object literal syntax
order doesn't matter
dot vs bracket notation
objName.propertyName = value
objName["propertyName"]= value
in bracket, it should be an expression (inside a string.)
anything that produces a value is a expression.(variables, functions)
doesnt work like this in dot notation.
prompt(): takes input from user, pop up window
objName.newProperty = value ;
object methods:
{
  fnName : function(param){
    return param
  },
  prop1:value1,
  fnName : function(){
    return this.prop1
  }
}
obj['fnName'](arg1)
any function attached to a object is called a method.
dry 
this keyword: represents current object who is calling.
this is equal to the object calling the method
arrays are also objects. thats why we have methods on it.
** exponentiation operator
iteration: loops
for(initializations ;conditions; update){//work}

initializations
while(condition){ //do something
update}

initializations
do { // do something
//update} while (condition)

break and continue: stop execution of loop completely or skip one iteration only.
Math.floor/trunc(Math.random()*6)+1 ;

developer skills:
prettier is an opinionated code editor.
consistent code.
file> preferences>user snippets
-> understand the problem
-> breaking up into sub problems
debugging process:
->  identify
-> find
-> fix
-> prevent
console.warn()
console.log()
console.error()
console.table()
prompt always returns a string
devtools -> sources-> script.js-> breakpoints
debugger;

html and css:
index.html
href: hypertext reference
inline and black elements
attributes 
ids , classes
id : unique
class : multiple
div, span
convention in css is  to use lowercase letters with hyphens (-) for words that are not separated by a space
form : semantic( has meaning), for seo
inline, internal and external css
selector { 
  property : value
}
some properties gets inherited(commonly fonts ones)
display : inline | block | none | flex | inline-block
# : id selector
. : class selector
box model:
in this order:
content: height width
padding
border
margin

fill area = content + padding(area that gets filled with background color or background image)

global reset :

*{
  margin : 0 ;
  padding : 0 ;
  box-sizing  : border-box ;
}

units : px, rem, em , vh , vw , %

curl link - to open web on terminal

child selector:
parentSelector childSelector{}























































 
























